AWSTemplateFormatVersion: 2010-09-09
Description: >-
  goshenkata-backend

Transform:
- AWS::Serverless-2016-10-31

Globals:
  Api:
    Auth:
      DefaultAuthorizer: CognitoAuthorizer
      Authorizers:
        CognitoAuthorizer:
          UserPoolArn: arn:aws:cognito-idp:eu-central-1:207567768006:userpool/eu-central-1_VG1OzzrL0
Resources:
  getEntryByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-entry-by-id.getEntryByIdHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 60
      Description: Get a single diary entry by id for the authorized user
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DiaryTable
      Environment:
        Variables:
          DIARY_TABLE: !Ref DiaryTable
          ALLOWED_USER_EMAIL: goshenkataklev@gmail.com
      Events:
        Api:
          Type: Api
          Properties:
            Path: /entries/{id}
            Method: GET
  deleteEntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/delete-entry.deleteEntryHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 60
      Description: Delete an entry and its S3 attachments (owner-only)
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref UploadsBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref DiaryTable
      Environment:
        Variables:
          DIARY_TABLE: !Ref DiaryTable
          UPLOAD_BUCKET: !Ref UploadsBucket
          ALLOWED_USER_EMAIL: goshenkataklev@gmail.com
      Events:
        Api:
          Type: Api
          Properties:
            Path: /entries/{id}
            Method: DELETE
  createEntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/create-entry.createEntryHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref DiaryTable
      Environment:
        Variables:
          DIARY_TABLE: !Ref DiaryTable
          ALLOWED_USER_EMAIL: goshenkataklev@gmail.com
      Events:
        Api:
          Type: Api
          Properties:
            Path: /entry
            Method: POST
  getEntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-entry.getEntryHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Get diary entries for a user by date.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DiaryTable
      Environment:
        Variables:
          DIARY_TABLE: !Ref DiaryTable
          ALLOWED_USER_EMAIL: goshenkataklev@gmail.com
      Events:
        Api:
          Type: Api
          Properties:
            Path: /entry/{date}
            Method: GET
  getEntriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-entries.getEntriesHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Get paginated diary entries for a user sorted by date desc.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DiaryTable
      Environment:
        Variables:
          DIARY_TABLE: !Ref DiaryTable
          ALLOWED_USER_EMAIL: goshenkataklev@gmail.com
      Events:
        Api:
          Type: Api
          Properties:
            Path: /entries
            Method: GET
  generateUploadUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/generate-upload-url.getUploadUrlHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30
      Description: Generate pre-signed S3 upload URLs for authenticated users.
      Policies:
        - S3WritePolicy:
            BucketName: !Ref UploadsBucket
      Environment:
        Variables:
          UPLOAD_BUCKET: !Ref UploadsBucket
          ALLOWED_USER_EMAIL: goshenkataklev@gmail.com
      Events:
        Api:
          Type: Api
          Properties:
            Path: /upload-url
            Method: POST
  generateAccessUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/generate-access-url.getAccessUrlHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30
      Description: Generate pre-signed S3 GET URLs for authenticated users (owner-only).
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref UploadsBucket
      Environment:
        Variables:
          UPLOAD_BUCKET: !Ref UploadsBucket
          ALLOWED_USER_EMAIL: goshenkataklev@gmail.com
      Events:
        Api:
          Type: Api
          Properties:
            Path: /access-url
            Method: POST
  DiaryTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: entryId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 4
        WriteCapacityUnits: 4
  UploadsBucket:
    Type: AWS::S3::Bucket
    Properties:
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - https://goshenkata.com
            AllowedMethods:
              - PUT
              - GET
              - HEAD
            AllowedHeaders:
              - '*'
            ExposedHeaders:
              - ETag
            MaxAge: 3000
  ApiGatewayUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /goshenkata/BACKEND_API_URL
      Type: String
      Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
      Description: "API Gateway endpoint URL for goshenkata backend"
Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
