name: Deploy frontend + terraform

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.filter.outputs.backend }}
      terraform-changed: ${{ steps.filter.outputs.terraform }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          backend:
            - 'backend/**'
          terraform:
            - 'terraform/**'
            - 'frontend/**'
            - '.github/workflows/**'

  terraform-deploy:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.terraform-changed == 'true'

    env:
      AWS_REGION: eu-central-1

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      working-directory: terraform
      run: terraform init

    - name: Get Git Commit Hash
      id: git-hash
      run: echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Terraform Apply
      working-directory: terraform
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      run: terraform apply -auto-approve -var="deployment_id=${{ steps.git-hash.outputs.hash }}" -var="cloudflare_api_token=${{ secrets.CLOUDFLARE_API_TOKEN }}" -var="cloudflare_zone_id=${{ secrets.CLOUDFLARE_ZONE_ID }}"

  sam-deploy:
    runs-on: ubuntu-latest
    needs: [check-changes, terraform-deploy]
    if: needs.check-changes.outputs.backend-changed == 'true' && needs.terraform-deploy.result == 'success'

    env:
      AWS_REGION: eu-central-1

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true
    
    - name: SAM Build
      working-directory: backend
      run: sam build --use-container
    
    - name: SAM Deploy
      working-directory: backend
      run: sam deploy --no-confirm-changeset --no-fail-on-empty-changeset

  codedeploy-frontend:
    runs-on: ubuntu-latest
    needs: [check-changes, terraform-deploy]
    if: needs.check-changes.outputs.terraform-changed == 'true' && needs.terraform-deploy.result == 'success'

    env:
      AWS_REGION: eu-central-1

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get Git Commit Hash
      id: git-hash
      run: echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Create deployment package
      run: |
        mkdir -p deployment-package
        cp -r scripts/ deployment-package/
        cp appspec.yml deployment-package/
        cd deployment-package
        zip -r ../deployment-${{ steps.git-hash.outputs.hash }}.zip .

    - name: Upload to S3
      run: |
        aws s3 cp deployment-${{ steps.git-hash.outputs.hash }}.zip s3://goshenkata-terraform-state/deployments/deployment-${{ steps.git-hash.outputs.hash }}.zip

    - name: Create CodeDeploy deployment
      id: create-deployment
      run: |
        DEPLOYMENT_ID=$(aws deploy create-deployment \
          --application-name "goshenkata.com" \
          --deployment-group-name "production" \
          --s3-location bucket=goshenkata-terraform-state,key=deployments/deployment-${{ steps.git-hash.outputs.hash }}.zip,bundleType=zip \
          --deployment-config-name "CodeDeployDefault.AllAtOnceMaxCodeDeploy" \
          --description "Frontend deployment for commit ${{ steps.git-hash.outputs.hash }}" \
          --query 'deploymentId' \
          --output text)
        
        echo "Deployment ID: $DEPLOYMENT_ID"
        echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT

    - name: Wait for deployment completion
      run: |
        echo "Waiting for deployment to complete..."
        aws deploy wait deployment-successful --deployment-id ${{ steps.create-deployment.outputs.deployment_id }}
        
        echo "Deployment completed successfully!"
        
        # Get deployment status for confirmation
        aws deploy get-deployment --deployment-id ${{ steps.create-deployment.outputs.deployment_id }} --query 'deploymentInfo.status' --output text
