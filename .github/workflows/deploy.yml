name: Deploy frontend + terraform

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.filter.outputs.backend }}
      frontend-changed: ${{ steps.filter.outputs.frontend }}
      terraform-changed: ${{ steps.filter.outputs.terraform }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          backend:
            - 'backend/**'
          frontend:
            - 'frontend/**'
            - 'scripts/**'
            - 'appspec.yml'
          terraform:
            - 'terraform/**'
            - '.github/workflows/**'

  terraform-deploy:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.terraform-changed == 'true' || needs.check-changes.outputs.frontend-changed == 'true' || github.event_name == 'workflow_dispatch'
    outputs:
      codedeploy-app-name: ${{ steps.terraform-outputs.outputs.app_name }}
      codedeploy-deployment-group: ${{ steps.terraform-outputs.outputs.deployment_group }}

    env:
      AWS_REGION: eu-central-1

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      working-directory: terraform
      run: terraform init

    - name: Terraform Apply
      working-directory: terraform
      run: terraform apply -auto-approve
    - name: Get Terraform outputs
      id: terraform-outputs
      working-directory: terraform
      run: |
        APP_NAME=$(terraform output -raw codedeploy_application_name)
        DEPLOYMENT_GROUP=$(terraform output -raw codedeploy_deployment_group_name)
        echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT
        echo "deployment_group=$DEPLOYMENT_GROUP" >> $GITHUB_OUTPUT

  sam-deploy:
    runs-on: ubuntu-latest
    needs: [check-changes, terraform-deploy]
    if: (needs.check-changes.outputs.backend-changed == 'true' && needs.terraform-deploy.result == 'success') || github.event_name == 'workflow_dispatch'

    env:
      AWS_REGION: eu-central-1

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true
    
    - name: SAM Build
      working-directory: backend
      run: sam build --use-container
    
    - name: SAM Deploy
      working-directory: backend
      run: sam deploy --no-confirm-changeset --no-fail-on-empty-changeset

  deploy:
    runs-on: ubuntu-latest
    needs: [check-changes, terraform-deploy]
        # Deploy if frontend changes OR terraform changes (but not backend only)
    if: |
      needs.terraform-deploy.result == 'success' && 
      (needs.check-changes.outputs.terraform-changed == 'true' || 
       needs.check-changes.outputs.frontend-changed == 'true' ||
       github.event_name == 'workflow_dispatch')

    env:
      AWS_REGION: eu-central-1

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy application with CodeDeploy
      run: |
        aws deploy create-deployment \
          --application-name "${{ needs.terraform-deploy.outputs.codedeploy-app-name }}" \
          --deployment-group-name "${{ needs.terraform-deploy.outputs.codedeploy-deployment-group }}" \
          --revision "{\"revisionType\":\"GitHub\",\"gitHubLocation\":{\"repository\":\"${{ github.repository }}\",\"commitId\":\"${{ github.sha }}\"}}" \
          --description "Deployment triggered by ${{ github.event_name }} - commit ${{ github.sha }}"
